#!/bin/bash
set -e
set -o pipefail

get_app_name() {
    IS_PROD = $1
    [ "$IS_PROD" = "yes" ] && echo $HEROKU_APP_NAME || echo $HEROKU_APP_NAME_STAGING
}

is_prod_deploy(){
    [ "$1" = "--prod" ] && echo "yes" || echo "no"
}

#asume that dist folder was created in separate "build" job
set_staging_server() {
    mkdir -p ./docker/public
    cp -R dist/web-app/. ./docker/public
    cp -R server/* docker/
    mkdir -p docker/services/default_data
    cp stubs/* docker/services/default_data
    rm docker/services/default_data/config.json
}

#asume that dist folder was created in separate "build" job
set_production_server() {
    #TODO this commands should be generate another things only for production
    mkdir -p ./docker/public
    cp -R dist/web-app/. ./docker/public
    cp -R server/* docker/
    mkdir -p docker/services/default_data
    cp stubs/* docker/services/default_data
    rm docker/services/default_data/config.json
}

echo "============================================================="
echo "      Creating Docker Image                                  "
echo "============================================================="
PACKAGE_VERSION=$(node -p -e "require('./package.json').version")
IS_PROD=$(is_prod_deploy $1)

echo "Get image name with production flag -> $IS_PROD"
APP_NAME=$(get_app_name $IS_PROD)

ENVIRONMENT_NAME=$([ $IS_PROD = "yes" ] && echo "production" || echo "staging")

echo "============================================================="
echo "          Provisioning docker directory                      "
echo "============================================================="
if [ $IS_PROD = "yes" ]; then
    set_production_server
elif [ $IS_PROD = "no" ]; then
    set_staging_server
fi

echo "============================================================="
echo "          Show directory files                               "
echo "============================================================="
# TODO should show entire tree of docker directory
ls -lha docker/public && ls -lha docker

cd docker

echo "$HEROKU_KEY" | docker login --username ${HEROKU_OWNER_EMAIL} --password-stdin registry.heroku.com
docker build -t registry.heroku.com/$APP_NAME/web --build-arg app_version=${PACKAGE_VERSION} --build-arg environment_name=${ENVIRONMENT_NAME} .

echo "==================================================================="
echo "      Publising Docker Image registry.heroku.com/$APP_NAME/web in Heroku Registry ...    "
echo "==================================================================="
docker push registry.heroku.com/${APP_NAME}/web
